# kmod completion                                          -*- shell-script -*-
#
# This file is part of systemd.
#
# Copyright 2010 Ran Benita
# Copyright (C) 2013  Intel Corporation. All rights reserved.
#
# systemd is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# systemd is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with systemd; If not, see <http://www.gnu.org/licenses/>.

__contains_word () {
        local word=$1; shift
        for w in "$@"; do [[ "$w" = "$word" ]] && return 0; done
        return 1
}

_kmod_static_nodes () {
        local OPTS='-o --output -f --format -h --help'
        local GROUP_FORMAT='human tmpfiles devname'

        case "$prev" in
        '-o' | '--output')
                compopt -o filenames
                COMPREPLY=( $(compgen -f -- "$cur") )
                return 0
                ;;
        '-f' | '--format')
                COMPREPLY=( $(compgen -W "$GROUP_FORMAT" -- "$cur" ) )
                return 0
                ;;
        esac

        COMPREPLY=( $(compgen -W "$OPTS" -- "$cur") )
}

_kmod() {
        local cur=${COMP_WORDS[COMP_CWORD]} prev=${COMP_WORDS[COMP_CWORD-1]}
        local VERBS=(help list static-nodes)
        local OPTS='-h --help -V --version'
        local verb

        # standalone options, no other option or action allowed
        for ((i=0; $i < $COMP_CWORD; i++)); do
                if __contains_word "${COMP_WORDS[i]}" ${OPTS}; then
                        return 0
                fi
        done

        # find the action
        for ((i=0; $i <= $COMP_CWORD; i++)); do
                if __contains_word "${COMP_WORDS[i]}" "${VERBS[@]}"; then
                        verb=${COMP_WORDS[i]}
                        break
                fi
        done

        if [[ -z $verb ]]; then
                COMPREPLY=( $(compgen -W '${OPTS[*]} ${VERBS[*]}' -- "$cur") )
                return 0
        fi

        local func=${verb//-/_}

        if declare -F _kmod_${func} > /dev/null; then
                _kmod_${func}
        fi

        return 0
}

complete -F _kmod kmod
